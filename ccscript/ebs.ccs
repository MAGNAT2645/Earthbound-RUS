import asm65816

//IMPORTANT NOTE: 0x00F8C2-0x00F95D must be set in used_ranges.yml.

ROM[0xC17C40] = {
	JMP_l(l_0xEE9A77)//0xC17C40
	NOP		//0xC17C44
	NOP		//0xC17C45
}

ROM[0xC1F3B3] = {
	JSL(l_0xEE9D31)	//0xC1F3B3
}

ROM[0xC21628] = {
	JSL(l_0xEE9DCE)	//0xC21628
	RTL		//0xC2162C
}

ROM[0xC2165E] = {
	JSL(l_0xEE9D65)	//0xC2165E
	RTL		//0xC21662
}

l_0xEE9200:
	AND_i(0x00FF)	//0xEE9200
	ASL		//0xEE9203
	ASL		//0xEE9204
	TAX		//0xEE9205
	RTS		//0xEE9206
l_0xEE9207:
	LDA_xl(0x316500)//0xEE9207
	STA_al(0x317080)//0xEE920B
	LDA_xl(0x316502)//0xEE920F
	STA_al(0x317082)//0xEE9213
	RTS		//0xEE9217
l_0xEE9218:
	LDA_a(0x97BC)	//0xEE9218
	STA_al(0x317080)//0xEE921B
	LDA_a(0x97BE)	//0xEE921F
	STA_al(0x317082)//0xEE9222
	RTS		//0xEE9226
l_0xEE9227:
	LDA_al(0x317080)//0xEE9227
	STA_xl(0x316500)//0xEE922B
	LDA_al(0x317082)//0xEE922F
	STA_xl(0x316502)//0xEE9233
	RTS		//0xEE9237
l_0xEE9238:
	LDA_i(4)	//0xEE9238
	JSR(l_0xEE9E20)	//0xEE923B
	LDA_a(0x97BB)	//0xEE923E
	STA_d(0x00)	//0xEE9241
	LDA_a(0x97BD)	//0xEE9243
	STA_d(0x02)	//0xEE9246
l_0xEE9248:
	LDA_dl(0x00)	//0xEE9248
	STA_al(0x317080)//0xEE924A
	INC_d(0x00)	//0xEE924E
	INC_d(0x00)	//0xEE9250
	LDA_dl(0x00)	//0xEE9252
	STA_al(0x317082)//0xEE9254
	RTS		//0xEE9258
l_0xEE9259:
	LDA_i(4)	//0xEE9259
	JSR(l_0xEE9E20)	//0xEE925C
	LDA_a(0x97BB)	//0xEE925F
	STA_d(0x00)	//0xEE9262
	LDA_a(0x97BD)	//0xEE9264
	STA_d(0x02)	//0xEE9267
	LDA_a(0x97BA)	//0xEE9269
	JSR(l_0xEE9200)	//0xEE926C
	RTS		//0xEE926F
l_0xEE9270:
	LDA_i(6)	//0xEE9270
	JSR(l_0xEE9E20)	//0xEE9273
	JSR(l_0xEE9218)	//0xEE9276
	RTS 		//0xEE9279
l_0xEE927A:
	LDA_i(3)	//0xEE927A
	JSR(l_0xEE9E20)	//0xEE927D
	LDA_a(0x97BC)	//0xEE9280
	JSR(l_0xEE9200)	//0xEE9283
	JSR(l_0xEE9207)	//0xEE9286
	RTS		//0xEE9289
l_0xEE928A:
	LDA_a(0x97BA)	//0xEE928A
	JSR(l_0xEE9200)	//0xEE928D
	PLA		//0xEE9290
	PHA		//0xEE9291
	STA_xl(0x316500)//0xEE9292
	LDA_i(0)	//0xEE9296
	STA_xl(0x316502)//0xEE9299
	PHK		//0xEE929D
	PER(0x0006)	//0xEE929E
	PEA(0x0002)	//0xEE92A1
	JMP_l(0xC10301)	//0xEE92A4
//???
	CLC		//0xEE92A8
	ADC_i(0x0017)	//0xEE92A9
	TAY		//0xEE92AC
	PLA		//0xEE92AD
	STA_y(0x0000)	//0xEE92AE
	LDA_i(0)	//0xEE92B1
	STA_y(0x0002)	//0xEE92B4
	RTS		//0xEE92B7
l_0xEE92B8:
	LDA_a(0x97BA)	//0xEE92B8
	JSR(l_0xEE9200)	//0xEE92BB
	JSR(l_0xEE9227)	//0xEE92BE
	RTS		//0xEE92C1
l_0xEE92C2:
	LDA_i(2)	//0xEE92C2
	JSR(l_0xEE9E20)	//0xEE92C5
	LDA_a(0x97BB)	//0xEE92C8
	JSR(l_0xEE9200)	//0xEE92CB
	LDA_xl(0x316500)//0xEE92CE
	STA_d(0x00)	//0xEE92D2
	LDA_xl(0x316502)//0xEE92D4
	STA_d(0x02)	//0xEE92D8
	LDA_a(0x97BA)	//0xEE92DA
	JSR(l_0xEE9200)	//0xEE92DD
	JSR(l_0xEE9248)	//0xEE92E0
	DEC_d(0x00)	//0xEE92E3
	DEC_d(0x00)	//0xEE92E5
	RTS		//0xEE92E7
l_0xEE92E8:
	LDA_xl(0x316500)//0xEE92E8
	CLC		//0xEE92EC
	ADC_al(0x317080)//0xEE92ED
	STA_al(0x317080)//0xEE92F1
	LDA_xl(0x316502)//0xEE92F5
	ADC_al(0x317082)//0xEE92F9
	STA_al(0x317082)//0xEE92FD
	RTS		//0xEE9301
l_0xEE9302:
	LDA_xl(0x316500)//0xEE9302
	SEC		//0xEE9306
	SBC_al(0x317080)//0xEE9307
	STA_al(0x317080)//0xEE930B
	LDA_xl(0x316502)//0xEE930F
	SBC_al(0x317082)//0xEE9313
	STA_al(0x317082)//0xEE9317
	RTS		//0xEE931B
l_0xEE931C:
	REP(0x31)	//0xEE931C
	PHB		//0xEE931E
	PEA(0x3131)	//0xEE931F
	PLB		//0xEE9322
	PLB   		//0xEE9323
	STZ_a(0x7080)	//0xEE9324
	STZ_a(0x7082)	//0xEE9327
	STZ_a(0x6904)	//0xEE932A
	STZ_a(0x6906)	//0xEE932D
	LDX_i(0x0020)	//0xEE9330
	LSR_a(0x6912)	//0xEE9333
	ROR_a(0x6910)	//0xEE9336
	BCC(0x13)	//0xEE9339, branches to 0xEE934E
	LDA_a(0x7080)	//0xEE933B
	CLC		//0xEE933E
	ADC_a(0x6900)	//0xEE933F
	STA_a(0x7080)	//0xEE9342
 	LDA_a(0x7082)	//0xEE9345
	ADC_a(0x6902)	//0xEE9348
	STA_a(0x7082)	//0xEE934B
	ASL_a(0x6900)	//0xEE934E
	ROL_a(0x6902)	//0xEE9351
	ROL_a(0x6904)	//0xEE9354
	ROL_a(0x6906)	//0xEE9357
	DEX		//0xEE935A
	BNE(0xD6)	//0xEE935B, branches to 0xEE9333
	PLB		//0xEE935D
	RTS		//0xEE935E
l_0xEE935F:
	REP(0x31)	//0xEE935F
	PHX		//0xEE9361
	PHY		//0xEE9362
	PHB		//0xEE9363
	PEA(0x3131)	//0xEE9364
	PLB		//0xEE9367
	PLB		//0xEE9368
	STZ_a(0x6910)	//0xEE9369
	STZ_a(0x6912)	//0xEE936C
	LDY_i(0x0020)	//0xEE936F
	ASL_a(0x7080)	//0xEE9372
	ROL_a(0x7082)	//0xEE9375
	ROL_a(0x6910)	//0xEE9378
	ROL_a(0x6912)	//0xEE937B
	SEC		//0xEE937E
	LDA_a(0x6910)	//0xEE937F
	SBC_a(0x6930)	//0xEE9382
	TAX		//0xEE9385
	LDA_a(0x6912)	//0xEE9386
	SBC_a(0x6932)	//0xEE9389
	BCC(0x09)	//0xEE938C, branches to 0xEE9397
	STX_a(0x6910)	//0xEE938E
	STA_a(0x6912)	//0xEE9391
	INC_a(0x7080)	//0xEE9394
	DEY		//0xEE9397
	BNE(0xD8)	//0xEE9398, branches to 0xEE9372
	PLB		//0xEE939A
	PLY		//0xEE939B
	PLX		//0xEE939C
	RTS		//0xEE939D
l_0xEE939E:
	LDA_xl(0x316500)//0xEE939E
	AND_al(0x317080)//0xEE93A2
	STA_al(0x317080)//0xEE93A6
	LDA_xl(0x316502)//0xEE93AA
	AND_al(0x317082)//0xEE93AE
	STA_al(0x317082)//0xEE93B2
	RTS		//0xEE93B6
l_0xEE93B7:
	LDA_xl(0x316500)//0xEE93B7
	ORA_al(0x317080)//0xEE93BB
	STA_al(0x317080)//0xEE93BF
	LDA_xl(0x316502)//0xEE93C3
	ORA_al(0x317082)//0xEE93C7
	STA_al(0x317082)//0xEE93CB
	RTS		//0xEE93CF
l_0xEE93D0:
	LDA_xl(0x316500)//0xEE93D0
	EOR_al(0x317080)//0xEE93D4
	STA_al(0x317080)//0xEE93D8
	LDA_xl(0x316502)//0xEE93DC
	EOR_al(0x317082)//0xEE93E0
	STA_al(0x317082)//0xEE93E4
	RTS		//0xEE93E8
l_0xEE93E9:
	LDA_xl(0x316502)//0xEE93E9
	CMP_al(0x317082)//0xEE93ED
	BNE(0x08)	//0xEE93F1, branches to 0xEE93FB
	LDA_xl(0x316500)//0xEE93F3
	CMP_al(0x317080)//0xEE93F7
	RTS		//0xEE93FB
l_0xEE93FC:
	JSR(l_0xEE9238)	//0xEE93FC
l_0xEE93FF:
	LDA_al(0x317080)//0xEE93FF
	AND_i(0x00FF)	//0xEE9403
	STA_al(0x317080)//0xEE9406
	LDA_i(0)	//0xEE940A
	STA_al(0x317082)//0xEE940D
	JMP(l_0xEE92B8)	//0xEE9411
l_0xEE9414:
	JSR(l_0xEE9238)	//0xEE9414
l_0xEE9417:
	LDA_i(0)	//0xEE9417
	STA_al(0x317082)//0xEE941A
	JMP(l_0xEE92B8)	//0xEE941E
l_0xEE9421:
	JSR(l_0xEE9238)	//0xEE9421
l_0xEE9424:
	LDA_al(0x317082)//0xEE9424
	AND_i(0x00FF)	//0xEE9428
	STA_al(0x317082)//0xEE942B
	JMP(l_0xEE92B8)	//0xEE942F
l_0xEE9432:
	JSR(l_0xEE9238)	//0xEE9432
	JMP(l_0xEE92B8)	//0xEE9435
l_0xEE9438:
	JSR(l_0xEE9259)	//0xEE9438
l_0xEE943B:
	SEP(0x20)	//0xEE943B
	LDA_xl(0x316500)//0xEE943D
	STA_dl(0x00)	//0xEE9441
	REP(0x20)	//0xEE9443
	RTS		//0xEE9445
l_0xEE9446:
	JSR(l_0xEE9259)	//0xEE9446
l_0xEE9449:
	LDA_xl(0x316500)//0xEE9449
	STA_dl(0x00)	//0xEE944D
	RTS		//0xEE944F
l_0xEE9450:
	JSR(l_0xEE9259)	//0xEE9450
l_0xEE9453:
	LDA_xl(0x316500)//0xEE9453
	STA_dl(0x00)	//0xEE9457
	INC_d(0x00)	//0xEE9459
	INC_d(0x00)	//0xEE945B
	SEP(0x20)	//0xEE945D
	LDA_xl(0x316502)//0xEE945F
	STA_dl(0x00)	//0xEE9463
	REP(0x20)	//0xEE9465
	RTS		//0xEE9467
l_0xEE9468:
	JSR(l_0xEE9259)	//0xEE9468
l_0xEE946B:
	LDA_xl(0x316500)//0xEE946B
	STA_dl(0x00)	//0xEE946F
	INC_d(0x00)	//0xEE9471
	INC_d(0x00)	//0xEE9473
	LDA_xl(0x316502)//0xEE9475
	STA_dl(0x00)	//0xEE9479
	RTS		//0xEE947B
l_0xEE947C:
	LDA_i(3)	//0xEE947C
	JSR(l_0xEE9E20)	//0xEE947F
	LDA_a(0x97BB)	//0xEE9482
	STA_al(0x317080)//0xEE9485
	LDA_i(0)	//0xEE9489
	STA_al(0x317082)//0xEE948C
	JMP(l_0xEE94A7)	//0xEE9490
l_0xEE9493:
	LDA_i(5)	//0xEE9493
	JSR(l_0xEE9E20)	//0xEE9496
	LDA_a(0x97BB)	//0xEE9499
	STA_al(0x317080)//0xEE949C
	LDA_a(0x97BD)	//0xEE94A0
	STA_al(0x317082)//0xEE94A3
l_0xEE94A7:
	JMP(l_0xEE92B8)	//0xEE94A7
l_0xEE94AA:
	JSR(l_0xEE927A)	//0xEE94AA
l_0xEE94AD:
	LDA_a(0x97BB)	//0xEE94AD
	JSR(l_0xEE9200)	//0xEE94B0
	JSR(l_0xEE92E8)	//0xEE94B3
	JMP(l_0xEE92B8)	//0xEE94B6
l_0xEE94B9:
	JSR(l_0xEE927A)	//0xEE94B9
l_0xEE94BC:
	LDA_a(0x97BB)	//0xEE94BC
	JSR(l_0xEE9200)	//0xEE94BF
	JSR(l_0xEE9302)	//0xEE94C2
	JMP(l_0xEE92B8)	//0xEE94C5
l_0xEE94C8:
	LDA_i(3)	//0xEE94C8
	JSR(l_0xEE9E20)	//0xEE94CB
	LDA_a(0x97BC)	//0xEE94CE
	JSR(l_0xEE9200)	//0xEE94D1
	LDA_xl(0x316500)//0xEE94D4
	STA_al(0x316910)//0xEE94D8
	LDA_xl(0x316502)//0xEE94DC
	STA_al(0x316912)//0xEE94E0
l_0xEE94E4:
	LDA_a(0x97BB)	//0xEE94E4
	JSR(l_0xEE9200)	//0xEE94E7
	LDA_xl(0x316500)//0xEE94EA
	STA_al(0x316900)//0xEE94EE
	LDA_xl(0x316502)//0xEE94F2
	STA_al(0x316902)//0xEE94F6
	JSR(l_0xEE931C)	//0xEE94FA
	JMP(l_0xEE92B8)	//0xEE94FD
l_0xEE9500:
	LDA_i(4)	//0xEE9500
	JSR(l_0xEE9E20)	//0xEE9503
	LDA_a(0x97BD)	//0xEE9506
	JSR(l_0xEE9200)	//0xEE9509
	LDA_xl(0x316500)//0xEE950C
	STA_al(0x316930)//0xEE9510
	LDA_xl(0x316502)//0xEE9514
	STA_al(0x316932)//0xEE9518
l_0xEE951C:
	LDA_a(0x97BC)	//0xEE951C
	JSR(l_0xEE9200)	//0xEE951F
	JSR(l_0xEE9207)	//0xEE9522
	JSR(l_0xEE935F)	//0xEE9525
	JSR(l_0xEE92B8)	//0xEE9528
	LDA_a(0x97BB)	//0xEE952B
	JSR(l_0xEE9200)	//0xEE952E
	LDA_al(0x316910)//0xEE9531
	STA_xl(0x316500)//0xEE9535
	LDA_al(0x316912)//0xEE9539
	STA_xl(0x316502)//0xEE953D
	RTS		//0xEE9541
l_0xEE9542:
	JSR(l_0xEE927A)	//0xEE9542
l_0xEE9545:
	LDA_a(0x97BB)	//0xEE9545
	JSR(l_0xEE9200)	//0xEE9548
	JSR(l_0xEE939E)	//0xEE954B
	JMP(l_0xEE92B8)	//0xEE954E
l_0xEE9551:
	JSR(l_0xEE927A)	//0xEE9551
l_0xEE9554:
	LDA_a(0x97BB)	//0xEE9554
	JSR(l_0xEE9200)	//0xEE9557
	JSR(l_0xEE93B7)	//0xEE955A
	JMP(l_0xEE92B8)	//0xEE955D
l_0xEE9560:
	JSR(l_0xEE927A)	//0xEE9560
l_0xEE9563:
	LDA_a(0x97BB)	//0xEE9563
	JSR(l_0xEE9200)	//0xEE9566
	JSR(l_0xEE93D0)	//0xEE9569
	JMP(l_0xEE92B8)	//0xEE956C
l_0xEE956F:
	LDA_al(0x3169FC)//0xEE956F
	DEC		//0xEE9573
	BRA(0x05)	//0xEE9574, branches to 0xEE957B
l_0xEE9576:
	LDA_al(0x3169FC)//0xEE9576
	INC		//0xEE957A
	STA_al(0x3169FC)//0xEE957B
	RTS		//0xEE957F
l_0xEE9580:
	LDA_i(1)	//0xEE9580
	JSR(l_0xEE9E20)	//0xEE9583
	LDA_a(0x97BA)	//0xEE9586
	JSR(l_0xEE9200)	//0xEE9589
l_0xEE958C:
	LDA_al(0x3169FC)//0xEE958C
	ASL		//0xEE9590
	ASL		//0xEE9591
	TAY		//0xEE9592
	RTS		//0xEE9593
l_0xEE9594:
	JSR(l_0xEE9576)	//0xEE9594
	JSR(l_0xEE9580)	//0xEE9597
	PHB		//0xEE959A
	PEA(0x3131)	//0xEE959B
	PLB		//0xEE959E
	PLB		//0xEE959F
	LDA_xl(0x316500)//0xEE95A0
	STA_y(0x69FC)	//0xEE95A4
	LDA_xl(0x316502)//0xEE95A7
	STA_y(0x69FE)	//0xEE95AB
	PLB		//0xEE95AE
	RTS		//0xEE95AF
l_0xEE95B0:
	JSR(l_0xEE9580)	//0xEE95B0
	PHB		//0xEE95B3
	PEA(0x3131)	//0xEE95B4
	PLB		//0xEE95B7
	PLB		//0xEE95B8
	LDA_y(0x69FC)	//0xEE95B9
	STA_xl(0x316500)//0xEE95BC
	LDA_y(0x69FE)	//0xEE95C0
	STA_xl(0x316502)//0xEE95C3
	PLB		//0xEE95C7
	JSR(l_0xEE956F)	//0xEE95C8
	RTS		//0xEE95CB
l_0xEE95CC:
	LDA_i(2)	//0xEE95CC
	JSR(l_0xEE9E20)	//0xEE95CF
	LDA_a(0x97BB)	//0xEE95D2
	JSR(l_0xEE9200)	//0xEE95D5
	JSR(l_0xEE9207)	//0xEE95D8
	LDA_a(0x97BA)	//0xEE95DB
	JSR(l_0xEE9200)	//0xEE95DE
	JSR(l_0xEE9227)	//0xEE95E1
	RTS		//0xEE95E4
l_0xEE95E5:
	JSR(l_0xEE9270)	//0xEE95E5
	JMP(l_0xEE94AD)	//0xEE95E8
l_0xEE95EB:
	JSR(l_0xEE9270)	//0xEE95EB
	JMP(l_0xEE94BC)	//0xEE95EE
l_0xEE95F1:
	LDA_i(6)	//0xEE95F1
	JSR(l_0xEE9E20)	//0xEE95F4
	LDA_a(0x97BC)	//0xEE95F7
	STA_al(0x316910)//0xEE95FA
	LDA_a(0x97BE)	//0xEE95FE
	STA_al(0x316912)//0xEE9601
	JMP(l_0xEE94E4)	//0xEE9605
l_0xEE9608:
	LDA_i(7)	//0xEE9608
	JSR(l_0xEE9E20)	//0xEE960B
	LDA_a(0x97BD)	//0xEE960E
	STA_al(0x316930)//0xEE9611
	LDA_a(0x97BF)	//0xEE9615
	STA_al(0x316932)//0xEE9618
	JMP(l_0xEE951C)	//0xEE961C
l_0xEE961F:
	JSR(l_0xEE9270)	//0xEE961F
	JMP(l_0xEE9545)	//0xEE9622
l_0xEE9625:
	JSR(l_0xEE9270)	//0xEE9625
	JMP(l_0xEE9554)	//0xEE9628
l_0xEE962B:
	JSR(l_0xEE9270)	//0xEE962B
	JMP(l_0xEE9563)	//0xEE962E
l_0xEE9631:
	JSR(l_0xEE9576)	//0xEE9631
	LDA_i(4)	//0xEE9634
	JSR(l_0xEE9E20)	//0xEE9637
	JSR(l_0xEE958C)	//0xEE963A
	TYX		//0xEE963D
	LDA_a(0x97BA)	//0xEE963E
	STA_xl(0x3169FC)//0xEE9641
	LDA_a(0x97BC)	//0xEE9645
	STA_xl(0x3169FE)//0xEE9648
	RTS		//0xEE964C
l_0xEE964D:
	JMP(l_0xEE956F)	//0xEE964D
l_0xEE9650:
	LDA_i(2)	//0xEE9650
	JSR(l_0xEE9E20)	//0xEE9653
	LDA_i(1)	//0xEE9656
	STA_al(0x317080)//0xEE9659
	DEC		//0xEE965D
	STA_al(0x317082)//0xEE965E
	JMP(l_0xEE94AD)	//0xEE9662
l_0xEE9665:
	LDA_i(2)	//0xEE9665
	JSR(l_0xEE9E20)	//0xEE9668
	LDA_i(1)	//0xEE966B
	STA_al(0x317080)//0xEE966E
	DEC		//0xEE9672
	STA_al(0x317082)//0xEE9673
	JMP(l_0xEE94BC)	//0xEE9677
l_0xEE967A:
	LDA_i(2)	//0xEE967A
	JSR(l_0xEE9E20)	//0xEE967D
	LDA_a(0x97BB)	//0xEE9680
	JSR(l_0xEE9200)	//0xEE9683
	LDA_xl(0x316500)//0xEE9686
	STA_d(0x00)	//0xEE968A
	LDA_xl(0x316502)//0xEE968C
	STA_d(0x02)	//0xEE9690
	ASL_d(0x00)	//0xEE9692
	ROL_d(0x02)	//0xEE9694
	LDA_a(0x97BA)	//0xEE9696
	JSR(l_0xEE9200)	//0xEE9699
	LDA_d(0x00)	//0xEE969C
	STA_xl(0x316500)//0xEE969E
	LDA_d(0x02)	//0xEE96A2
	STA_xl(0x316502)//0xEE96A4
	RTS		//0xEE96A8
l_0xEE96A9:
	LDA_i(2)	//0xEE96A9
	JSR(l_0xEE9E20)	//0xEE96AC
	LDA_a(0x97BB)	//0xEE96AF
	JSR(l_0xEE9200)	//0xEE96B2
	LDA_xl(0x316500)//0xEE96B5
	STA_d(0x00)	//0xEE96B9
	LDA_xl(0x316502)//0xEE96BB
	STA_d(0x02)	//0xEE96BF
	LSR_d(0x02)	//0xEE96C1
	ROR_d(0x00)	//0xEE96C3
	LDA_a(0x97BA)	//0xEE96C5
	JSR(l_0xEE9200)	//0xEE96C8
	LDA_d(0x00)	//0xEE96CB
	STA_xl(0x316500)//0xEE96CD
	LDA_d(0x02)	//0xEE96D1)
	STA_xl(0x316502)//0xEE96D3
	RTS		//0xEE96D7
l_0xEE96D8:
	LDA_i(2)	//0xEE96D8
	JSR(l_0xEE9E20)	//0xEE96DB
	LDA_al(0x3169FC)//0xEE96DE
	CLC		//0xEE96E2
	ADC_a(0x97BA)	//0xEE96E3
	STA_al(0x3169FC)//0xEE96E6
	RTS		//0xEE96EA
l_0xEE96EB:
	LDA_i(3)	//0xEE96EB
	JSR(l_0xEE9E20)	//0xEE96EE
	LDA_a(0x97BA)	//0xEE96F1
	JSR(l_0xEE9200)	//0xEE96F4
	LDA_al(0x3169FC)//0xEE96F7
	CLC		//0xEE96FB
	ADC_a(0x97BB)	//0xEE96FC
	ASL		//0xEE96FF
	ASL		//0xEE9700
	TAY		//0xEE9701
	RTS		//0xEE9702
l_0xEE9703:
	JSR(l_0xEE96EB)	//0xEE9703
	PHB		//0xEE9706
	PEA(0x3131)	//0xEE9707
	PLB		//0xEE970A
	PLB		//0xEE970B
	LDA_y(0x69FC)	//0xEE970C
	STA_xl(0x316500)//0xEE970F
	LDA_y(0x69FE)	//0xEE9713
	STA_xl(0x316502)//0xEE9716
	PLB		//0xEE971A
	RTS		//0xEE971B
l_0xEE971C:
	JSR(l_0xEE96EB)	//0xEE971C
	PHB		//0xEE971F
	PEA(0x3131)	//0xEE9720
	PLB		//0xEE9723
	PLB		//0xEE9724
	LDA_xl(0x316500)//0xEE9725
	STA_y(0x69FC)	//0xEE9729
	LDA_xl(0x316502)//0xEE972C
	STA_y(0x69FE)	//0xEE9730
	PLB		//0xEE9733
	RTS		//0xEE9734
l_0xEE9735:
	JSR(l_0xEE927A)	//0xEE9735
l_0xEE9738:
	LDA_a(0x97BB)	//0xEE9738
	JSR(l_0xEE9200)	//0xEE973B
	JSR(l_0xEE93E9)	//0xEE973E
	BEQ(0x05)	//0xEE9741, branches to 0xEE9748
	PEA(0x0000)	//0xEE9743
	BRA(0x03)	//0xEE9746, branches to 0xEE974B
	PEA(0x0001)	//0xEE9748
	JMP(l_0xEE928A)	//0xEE974B
l_0xEE974E:
	JSR(l_0xEE927A)	//0xEE974E
l_0xEE9751:
	LDA_a(0x97BB)	//0xEE9751
	JSR(l_0xEE9200)	//0xEE9754
	JSR(l_0xEE93E9)	//0xEE9757
	BNE(0x05)	//0xEE975A, branches to 0xEE9761
	PEA(0x0000)	//0xEE975C
	BRA(0x03)	//0xEE975F, branches to 0xEE9764
	PEA(0x0001)	//0xEE9761
	JMP(l_0xEE928A)	//0xEE9764
l_0xEE9767:
	JSR(l_0xEE927A)	//0xEE9767
l_0xEE976A:
	LDA_a(0x97BB)	//0xEE976A
	JSR(l_0xEE9200)	//0xEE976D
	JSR(l_0xEE93E9)	//0xEE9770
	BCS(0x05)	//0xEE9773, branches to 0xEE977A
	PEA(0x0000)	//0xEE9775
	BRA(0x03)	//0xEE9778, branches to 0xEE977D
	PEA(0x0001)	//0xEE977A
	JMP(l_0xEE928A)	//0xEE977D
l_0xEE9780:
	JSR(l_0xEE927A)	//0xEE9780
l_0xEE9783:
	LDA_a(0x97BB)	//0xEE9783
	JSR(l_0xEE9200)	//0xEE9786
	JSR(l_0xEE93E9)	//0xEE9789
	BCC(0x07)	//0xEE978C, branches to 0xEE9795
	BEQ(0x05)	//0xEE978E, branches to 0xEE9795
	PEA(0x0000)	//0xEE9790
	BRA(0x03)	//0xEE9793, branches to 0xEE9798
	PEA(0x0001)	//0xEE9795
	JMP(l_0xEE928A)	//0xEE9798
l_0xEE979B:
	JSR(l_0xEE927A)	//0xEE979B
l_0xEE979E:
	LDA_a(0x97BB)	//0xEE979E
	JSR(l_0xEE9200)	//0xEE97A1
	JSR(l_0xEE93E9)	//0xEE97A4
	BCC(0x07)	//0xEE97A7, branches to 0xEE97B0
	BEQ(0x05)	//0xEE97A9, branches to 0xEE97B0
	PEA(0x0001)	//0xEE97AB
	BRA(0x03)	//0xEE97AE, branches to 0xEE97B3
	PEA(0x0000)	//0xEE97B0
	JMP(l_0xEE928A)	//0xEE97B3
l_0xEE97B6:
	JSR(l_0xEE927A)	//0xEE97B6
l_0xEE97B9:
	LDA_a(0x97BB)	//0xEE97B9
	JSR(l_0xEE9200)	//0xEE97BC
	JSR(l_0xEE93E9)	//0xEE97BF
	BCS(0x05)	//0xEE97C2, branches to 0xEE97C9
	PEA(0x0001)	//0xEE97C4
	BRA(0x03)	//0xEE97C7, branches to 0xEE97CC
	PEA(0x0000)	//0xEE97C9
	JMP(l_0xEE928A)	//0xEE97CC
l_0xEE97CF:
	JSR(l_0xEE9270)	//0xEE97CF
	JMP(l_0xEE9738)	//0xEE97D2
l_0xEE97D5:
	JSR(l_0xEE9270)	//0xEE97D5
	JMP(l_0xEE9751)	//0xEE97D8
l_0xEE97DB:
	JSR(l_0xEE9270)	//0xEE97DB
	JMP(l_0xEE976A)	//0xEE97DE
l_0xEE97E1:
	JSR(l_0xEE9270)	//0xEE97E1
	JMP(l_0xEE9783)	//0xEE97E4
l_0xEE97E7:
	JSR(l_0xEE9270)	//0xEE97E7
	JMP(l_0xEE979E)	//0xEE97EA
l_0xEE97ED:
	JSR(l_0xEE9270)	//0xEE97ED
	JMP(l_0xEE97B9)	//0xEE97F0
l_0xEE97F3:
	REP(0x31)	//0xEE97F3
	LDY_i(2)	//0xEE97F5
	JMP(l_0xEE9808)	//0xEE97F8
l_0xEE97FB:
	REP(0x31)	//0xEE97FB
	LDY_i(0x000A)	//0xEE97FD
	JMP(l_0xEE9808)	//0xEE9800
l_0xEE9803:
	REP(0x31)	//0xEE9803
	LDY_i(0x0010)	//0xEE9805
l_0xEE9808:
	PHY		//0xEE9808
	LDA_i(2)	//0xEE9809
	JSR(l_0xEE9E20)	//0xEE980C
	LDA_a(0x97BA)	//0xEE980F
	JSR(l_0xEE9200)	//0xEE9812
	LDA_xl(0x316500)//0xEE9815
	STA_al(0x317080)//0xEE9819
	LDA_xl(0x316502)//0xEE981D
	STA_al(0x317082)//0xEE9821
	LDX_i(0x0020)	//0xEE9825
	LDA_i(2)	//0xEE9828
	SEP(0x20)	//0xEE982B
	STA_xl(0x317040)//0xEE982D
	REP(0x20)	//0xEE9831
	PLY		//0xEE9833
	BRA(0x00)	//0xEE9834
	TYA		//0xEE9836
	STA_al(0x316930)//0xEE9837
	LDA_i(0)	//0xEE983B
	STA_al(0x316932)//0xEE983E
	JSR(l_0xEE935F)	//0xEE9842
	LDA_al(0x316910)//0xEE9845
	SEP(0x20)	//0xEE9849
	CMP_8(0x0A)	//0xEE984B
	BCC(0x05)	//0xEE984D, branches to 0xEE9854
	CLC		//0xEE984F
	ADC_8(0x67)	//0xEE9850
	BRA(0x03)	//0xEE9852, branches to 0xEE9857
	CLC		//0xEE9854
	ADC_8(0x60)	//0xEE9855
	DEX		//0xEE9857
	STA_xl(0x317040)//0xEE9858
	REP(0x20)	//0xEE985C
	LDA_al(0x317082)//0xEE985E
	BNE(0xD2)	//0xEE9862
	LDA_al(0x317080)//0xEE9864
	BNE(0xCC)	//0xEE9868
	LDA_a(0x97BB)	//0xEE986A
	AND_i(0x00FF)	//0xEE986D
	CMP_i(0)	//0xEE9870
	BEQ(0x2F)	//0xEE9873, branches to 0xEE98A4
	TXA		//0xEE9875
	STA_al(0x317080)//0xEE9876
	LDA_i(0x0020)	//0xEE987A
	SEC		//0xEE987D
	SBC_al(0x317080)//0xEE987E
	STA_al(0x317080)//0xEE9882
	LDA_a(0x97BB)	//0xEE9886
	AND_i(0x00FF)	//0xEE9889
	SEC		//0xEE988C
	SBC_al(0x317080)//0xEE988D
	BEQ(0x11)	//0xEE9891, branches to 0xEE98A4
	BMI(0x0F)	//0xEE9893, branches to 0xEE98A4
	TAY		//0xEE9895
	SEP(0x20)	//0xEE9896
	LDA_8(0x60)	//0xEE9898
	DEX		//0xEE989A
	STA_xl(0x317040)//0xEE989B
	DEY		//0xEE989F
	BNE(0xF8)	//0xEE98A0, branches to 0xEE989A
	REP(0x20)	//0xEE98A2
	TXA		//0xEE98A4
	CLC		//0xEE98A5
	ADC_i(0x7040)	//0xEE98A6
	STA_d(0x0E)	//0xEE98A9
	LDA_i(0x0031)	//0xEE98AB
	STA_d(0x10)	//0xEE98AE
	JSL(0xC186B1)	//0xEE98B0
	LDA_i(0)	//0xEE98B4
	RTS		//0xEE98B7
l_0xEE98B8:
	LDA_i(1)	//0xEE98B8
	JSR(l_0xEE9E20)	//0xEE98BB
	LDA_a(0x97BA)	//0xEE98BE
	JSR(l_0xEE9200)	//0xEE98C1
	JSR(l_0xEE9207)	//0xEE98C4
	LDA_i(0x96C5)	//0xEE98C7
	LDX_a(0x97B8)	//0xEE98CA
	CLC		//0xEE98CD
	BRA(0x03)	//0xEE98CE, branches to 0xEE98D3
	ADC_i(0x001B)	//0xEE98D0
	DEX		//0xEE98D3
	BNE(0xFA)	//0xEE98D4, branches to 0xEE98D0
	TAX		//0xEE98D6
	LDA_al(0x317080)//0xEE98D7
	STA_x(0x0000)	//0xEE98DB
	LDA_al(0x317082)//0xEE98DE
	STA_x(0x0002)	//0xEE98E2
	RTS		//0xEE98E5
l_0xEE98E6:
	LDA_i(1)	//0xEE98E6
	JSR(l_0xEE9E20)	//0xEE98E9
	LDA_a(0x97BA)	//0xEE98EC
	JSR(l_0xEE9200)	//0xEE98EF
	LDA_xl(0x316500)//0xEE98F2
	STA_d(0x0E)	//0xEE98F6
	LDA_xl(0x316502)//0xEE98F8
	STA_d(0x10)	//0xEE98FC
	JSL(0xC186B1)	//0xEE98FE
	LDA_i(0)	//0xEE9902
	RTS		//0xEE9905
l_0xEE9906:
	LDA_i(1)	//0xEE9906
	JSR(l_0xEE9E20)	//0xEE9909
	LDA_a(0x97BA)	//0xEE990C
	JSR(l_0xEE9200)	//0xEE990F
	PHD		//0xEE9912
	PHB		//0xEE9913
	PHK		//0xEE9914
	PER(0x000F)	//0xEE9915
	SEP(0x20)	//0xEE9918
	LDA_xl(0x316502)//0xEE991A
	PHA		//0xEE991E
	REP(0x20)	//0xEE991F
	LDA_xl(0x316500)//0xEE9921
	DEC		//0xEE9925
	PHA		//0xEE9926
	RTL		//0xEE9927
//???
	PLB		//0xEE9928
	PLD		//0xEE9929
	RTS		//0xEE992A
l_0xEE992B:
	STA_al(0x317084)//0xEE992B
	PHK		//0xEE992F
	PER(0x0006)	//0xEE9930
	PEA(0x0002)	//0xEE9933
	JMP_l(0xC10301)	//0xEE9936
//???
	CLC		//0xEE993A
	ADC_al(0x317084)//0xEE993B
	TAY		//0xEE993F
	PHY		//0xEE9940
	LDA_i(1)	//0xEE9941
	JSR(l_0xEE9E20)	//0xEE9944
	LDA_a(0x97BA)	//0xEE9947
	JSR(l_0xEE9200)	//0xEE994A
	PLY		//0xEE994D
	RTS		//0xEE994E
l_0xEE994F:
	LDA_i(0x0017)	//0xEE994F
l_0xEE9952:
	JSR(l_0xEE992B)	//0xEE9952
	LDA_y(0x0000)	//0xEE9955
	STA_xl(0x316500)//0xEE9958
	LDA_y(0x0002)	//0xEE995C
	STA_xl(0x316502)//0xEE995F
	RTS		//0xEE9963
l_0xEE9964:
	LDA_i(0x001B)	//0xEE9964
	JMP(l_0xEE9952)	//0xEE9967
l_0xEE996A:
	LDA_i(0x001F)	//0xEE996A
	JSR(l_0xEE992B)	//0xEE996D
	LDA_y(0x0000)	//0xEE9970
	STA_xl(0x316500)//0xEE9973
	LDA_i(0)	//0xEE9977
	STA_xl(0x316502)//0xEE997A
	RTS		//0xEE997E
l_0xEE997F:
	LDA_i(0x0017)	//0xEE997F
l_0xEE9982:
	JSR(l_0xEE992B)	//0xEE9982
	LDA_xl(0x316500)//0xEE9985
	STA_y(0x0000)	//0xEE9989
	LDA_xl(0x316502)//0xEE998C
	STA_y(0x0002)	//0xEE9990
	RTS		//0xEE9993
l_0xEE9994:
	LDA_i(0x001B)	//0xEE9994
	JMP(l_0xEE9982)	//0xEE9997
l_0xEE999A:
	LDA_i(0x001F)	//0xEE999A
	JSR(l_0xEE992B)	//0xEE999D
	LDA_xl(0x316500)//0xEE99A0
	STA_y(0x0000)	//0xEE99A4
	RTS		//0xEE99A7
l_0xEE99A8:
	JSR(l_0xEE92C2)	//0xEE99A8
	JMP(l_0xEE93FF)	//0xEE99AB
l_0xEE99AE:
	JSR(l_0xEE92C2)	//0xEE99AE
	JMP(l_0xEE9417)	//0xEE99B1
l_0xEE99B4:
	JSR(l_0xEE92C2)	//0xEE99B4
	JMP(l_0xEE9424)	//0xEE99B7
l_0xEE99BA:
	JSR(l_0xEE92C2)	//0xEE99BA
	JMP(l_0xEE92B8)	//0xEE99BD
l_0xEE99C0:
	JSR(l_0xEE92C2)	//0xEE99C0
	JMP(l_0xEE943B)	//0xEE99C3
l_0xEE99C6:
	JSR(l_0xEE92C2)	//0xEE99C6
	JMP(l_0xEE9449)	//0xEE99C9
l_0xEE99CC:
	JSR(l_0xEE92C2)	//0xEE99CC
	JMP(l_0xEE9453)	//0xEE99CF
l_0xEE99D2:
	JSR(l_0xEE92C2)	//0xEE99D2
	JMP(l_0xEE946B)	//0xEE99D5
l_0xEE99D8:
	LDA_i(3)	//0xEE99D8
	JSR(l_0xEE9E20)	//0xEE99DB
	LDA_a(0x97BA)	//0xEE99DE
	JSR(l_0xEE9200)	//0xEE99E1
	LDA_xl(0x316500)//0xEE99E4
	STA_d(0x00)	//0xEE99E8
	LDA_xl(0x316502)//0xEE99EA
	STA_d(0x02)	//0xEE99EE 
	LDA_a(0x97BC)	//0xEE99F0
	JSR(l_0xEE9200)	//0xEE99F3
	LDA_xl(0x316500)//0xEE99F6
	TAY		//0xEE99FA
	SEP(0x20)	//0xEE99FB
	LDA_a(0x97BB)	//0xEE99FD
	BRA(0x02)	//0xEE9A00
	STA_dly(0x00)	//0xEE9A02
	DEY		//0xEE9A04
	BPL(0xFB)	//0xEE9A05, branches to 0xEE9A02
	REP(0x20)	//0xEE9A07
	RTS		//0xEE9A09
l_0xEE9A0A:
	LDA_i(3)	//0xEE9A0A
	JSR(l_0xEE9E20)	//0xEE9A0D
	LDA_a(0x97BA)	//0xEE9A10
	JSR(l_0xEE9200)	//0xEE9A13
	LDA_xl(0x316500)//0xEE9A16
	STA_d(0x00)	//0xEE9A1A
	LDA_xl(0x316502)//0xEE9A1C
	STA_d(0x02)	//0xEE9A20
	LDA_a(0x97BB)	//0xEE9A22
	JSR(l_0xEE9200)	//0xEE9A25
	LDA_xl(0x316500)//0xEE9A28
	STA_d(0x04)	//0xEE9A2C
	LDA_xl(0x316502)//0xEE9A2E
	STA_d(0x06)	//0xEE9A32
	LDA_a(0x97BC)	//0xEE9A34
	JSR(l_0xEE9200)	//0xEE9A37
	LDA_xl(0x316500)//0xEE9A3A
	TAY		//0xEE9A3E
	SEP(0x20)	//0xEE9A3F
	BRA(0x04)	//0xEE9A41
	LDA_dly(0x00)	//0xEE9A43
	STA_dly(0x04)	//0xEE9A45
	DEY		//0xEE9A47
	BPL(0xF9)	//0xEE9A48, branches to 0xEE9A43
	REP(0x20)	//0xEE9A4A
	RTS		//0xEE9A4C
l_0xEE9A4D:
	LDA_i(2)	//0xEE9A4D
	JSR(l_0xEE9E20)	//0xEE9A50
	LDA_a(0x97BA)	//0xEE9A53
	JSR(l_0xEE9200)	//0xEE9A56
	LDA_xl(0x316500)//0xEE9A59
	STA_d(0x0E)	//0xEE9A5D
	LDA_xl(0x316502)//0xEE9A5F
	STA_d(0x10)	//0xEE9A63
	LDA_a(0x97BB)	//0xEE9A65
	JSR(l_0xEE9200)	//0xEE9A68
	LDA_xl(0x316500)//0xEE9A6B
	LDX_i(0xFFFF)	//0xEE9A6F
	JSL(0xC2032B)	//0xEE9A72
	RTS		//0xEE9A76
l_0xEE9A77:
	TAY		//0xEE9A77
	STY_d(0x16)	//0xEE9A78
	TXA		//0xEE9A7A
	BNE(0x04)	//0xEE9A7B, branches to 0xEE9A81
	JMP_l(0xC17C70)	//0xEE9A7D
	CMP_i(7)	//0xEE9A81
	BCS(0x04)	//0xEE9A84, branches to 0xEE9A8A
	JMP_l(0xC17C46)	//0xEE9A86
	SEC		//0xEE9A8A
	SBC_i(7)	//0xEE9A8B
	ASL		//0xEE9A8E
	TAX		//0xEE9A8F
	JSR_ix(l_0xEE9A97)//0xEE9A90
	JMP_l(0xC17D8D)	//0xEE9A93
l_0xEE9A97:
	short(l_0xEE9B8B)//0xEE9A97
	short(l_0xEE9BA8)//0xEE9A99
	short(l_0xEE9B79)//0xEE9A9B
	short(l_0xEE97F3)//0xEE9A9D
	short(l_0xEE97FB)//0xEE9A9F
	short(l_0xEE9803)//0xEE9AA1
	short(l_0xEE98B8)//0xEE9AA3
	short(l_0xEE98E6)//0xEE9AA5
	short(l_0xEE9906)//0xEE9AA7
	short(l_0xEE93FC)//0xEE9AA9
	short(l_0xEE9414)//0xEE9AAB
	short(l_0xEE9421)//0xEE9AAD
	short(l_0xEE9432)//0xEE9AAF
	short(l_0xEE9438)//0xEE9AB1
	short(l_0xEE9446)//0xEE9AB3
	short(l_0xEE9450)//0xEE9AB5
	short(l_0xEE9468)//0xEE9AB7
	short(l_0xEE947C)//0xEE9AB9
	short(l_0xEE9493)//0xEE9ABB
	short(l_0xEE994F)//0xEE9ABD
	short(l_0xEE9964)//0xEE9ABF
	short(l_0xEE996A)//0xEE9AC1
	short(l_0xEE997F)//0xEE9AC3
	short(l_0xEE9994)//0xEE9AC5
	short(l_0xEE999A)//0xEE9AC7
	short(l_0xEE94AA)//0xEE9AC9
	short(l_0xEE94B9)//0xEE9ACB
	short(l_0xEE94C8)//0xEE9ACD
	short(l_0xEE9500)//0xEE9ACF
	short(l_0xEE9542)//0xEE9AD1
	short(l_0xEE9551)//0xEE9AD3
	short(l_0xEE9560)//0xEE9AD5
	short(l_0xEE9594)//0xEE9AD7
	short(l_0xEE95B0)//0xEE9AD9
	short(l_0xEE95CC)//0xEE9ADB
	short(l_0xEE9B8A)//0xEE9ADD
	short(l_0xEE9B8A)//0xEE9ADF
	short(l_0xEE9B8A)//0xEE9AE1
	short(l_0xEE9B8A)//0xEE9AE3
	short(l_0xEE9B8A)//0xEE9AE5
	short(l_0xEE9B8A)//0xEE9AE7
	short(l_0xEE95E5)//0xEE9AE9	
	short(l_0xEE95EB)//0xEE9AEB
	short(l_0xEE95F1)//0xEE9AED	
	short(l_0xEE9608)//0xEE9AEF	
	short(l_0xEE961F)//0xEE9AF1	
	short(l_0xEE9625)//0xEE9AF3	
	short(l_0xEE962B)//0xEE9AF5
	short(l_0xEE9631)//0xEE9AF7
	short(l_0xEE964D)//0xEE9AF9
	short(l_0xEE96D8)//0xEE9AFB
	short(l_0xEE9650)//0xEE9AFD
	short(l_0xEE9665)//0xEE9AFF
	short(l_0xEE967A)//0xEE9B01
	short(l_0xEE96A9)//0xEE9B03
	short(l_0xEE9703)//0xEE9B05
	short(l_0xEE971C)//0xEE9B07
	short(l_0xEE9735)//0xEE9B09
	short(l_0xEE974E)//0xEE9B0B
	short(l_0xEE9767)//0xEE9B0D
	short(l_0xEE9780)//0xEE9B0F
	short(l_0xEE979B)//0xEE9B11
	short(l_0xEE97B6)//0xEE9B13
	short(l_0xEE9B8A)//0xEE9B15
	short(l_0xEE9B8A)//0xEE9B17
	short(l_0xEE9B8A)//0xEE9B19
	short(l_0xEE9B8A)//0xEE9B1B
	short(l_0xEE9B8A)//0xEE9B1D
	short(l_0xEE9B8A)//0xEE9B1F
	short(l_0xEE9B8A)//0xEE9B21
	short(l_0xEE9B8A)//0xEE9B23
	short(l_0xEE9B8A)//0xEE9B25
	short(l_0xEE9B8A)//0xEE9B27
	short(l_0xEE97CF)//0xEE9B29
	short(l_0xEE97D5)//0xEE9B2B
	short(l_0xEE97DB)//0xEE9B2D
	short(l_0xEE97E1)//0xEE9B2F
	short(l_0xEE97E7)//0xEE9B31
	short(l_0xEE97ED)//0xEE9B33
	short(l_0xEE9B8A)//0xEE9B35
	short(l_0xEE9B8A)//0xEE9B37
	short(l_0xEE9B8A)//0xEE9B39
	short(l_0xEE9B8A)//0xEE9B3B
	short(l_0xEE9B8A)//0xEE9B3D
	short(l_0xEE9B8A)//0xEE9B3F
	short(l_0xEE9B8A)//0xEE9B41
	short(l_0xEE9B8A)//0xEE9B43
	short(l_0xEE9B8A)//0xEE9B45
	short(l_0xEE9B8A)//0xEE9B47
	short(l_0xEE9C40)//0xEE9B49
	short(l_0xEE9C10)//0xEE9B4B
	short(l_0xEE9BCA)//0xEE9B4D
	short(l_0xEE9BED)//0xEE9B4F
	short(l_0xEE9A4D)//0xEE9B51
	short(l_0xEE99D8)//0xEE9B53
	short(l_0xEE9A0A)//0xEE9B55
	short(l_0xEE9B8A)//0xEE9B57
	short(l_0xEE9B8A)//0xEE9B59
	short(l_0xEE9B8A)//0xEE9B5B
	short(l_0xEE9B8A)//0xEE9B5D
	short(l_0xEE9B8A)//0xEE9B5F
	short(l_0xEE9B8A)//0xEE9B61
	short(l_0xEE9B8A)//0xEE9B63
	short(l_0xEE9B8A)//0xEE9B65
	short(l_0xEE9B8A)//0xEE9B67
	short(l_0xEE99A8)//0xEE9B69
	short(l_0xEE99AE)//0xEE9B6B	
	short(l_0xEE99B4)//0xEE9B6D	
	short(l_0xEE99BA)//0xEE9B6F	
	short(l_0xEE99C0)//0xEE9B71
	short(l_0xEE99C6)//0xEE9B73
	short(l_0xEE99CC)//0xEE9B75
	short(l_0xEE99D2)//0xEE9B77
l_0xEE9B79:	//[1B 04] - Print hidden message.
	REP(0x31)	//0xEE9B79
	LDA_i(0x9587)	//0xEE9B7B
	STA_d(0x0E)	//0xEE9B7E
	LDA_i(0)	//0xEE9B80
	STA_d(0x10)	//0xEE9B83
	JSL(0xC186B1)	//0xEE9B85
	RTS		//0xEE9B89
l_0xEE9B8A:
	RTS		//0xEE9B8A
l_0xEE9B8B:
	LDA_i(3)	//0xEE9B8B
	JSR(l_0xEE9E20)	//0xEE9B8E
	PHD		//0xEE9B91
	PHB		//0xEE9B92
	PHK		//0xEE9B93
	PER(0x000D)	//0xEE9B94
	SEP(0x20)	//0xEE9B97
	LDA_a(0x97BC)	//0xEE9B99
	PHA		//0xEE9B9C
	REP(0x20)	//0xEE9B9D
	LDA_a(0x97BA)	//0xEE9B9F
	DEC		//0xEE9BA2
	PHA		//0xEE9BA3
	RTL		//0xEE9BA4
//???
	PLB		//0xEE9BA5
	PLD		//0xEE9BA6
	RTS		//0xEE9BA7
l_0xEE9BA8:
	LDA_i(5)	//0xEE9BA8
	JSR(l_0xEE9E20)	//0xEE9BAB
	PHD		//0xEE9BAE
	PHB		//0xEE9BAF
	PHK		//0xEE9BB0
	PER(0x0012)	//0xEE9BB1
	LDA_a(0x97BD)	//0xEE9BB4
	DEC		//0xEE9BB7
	PHA		//0xEE9BB8
	SEP(0x20)	//0xEE9BB9
	LDA_a(0x97BC)	//0xEE9BBB
	PHA		//0xEE9BBE
	REP(0x20)	//0xEE9BBF
	LDA_a(0x97BA)	//0xEE9BC1
	DEC		//0xEE9BC4
	PHA		//0xEE9BC5
	RTL		//0xEE9BC6
//???
	PLB		//0xEE9BC7
	PLD		//0xEE9BC8
	RTS		//0xEE9BC9
l_0xEE9BCA:	//give_tpt_movaddr
	LDA_i(2)	//0xEE9BCA
	JSR(l_0xEE9E20)	//0xEE9BCD
	LDA_a(0x97BA)	//0xEE9BD0
	JSL(0xC4605A)	//0xEE9BD3
	TAX		//0xEE9BD7
	PHX
	LDA_i(3)	//0xEE9BD8
	JSR(l_0xEE9E20)	//0xEE9BDB
	PLX
	LDA_a(0x97BC)	//0xEE9BDE
	AND_i(0x00FF)	//0xEE9BE1
	TAY		//0xEE9BE4
	LDA_a(0x97BA)	//0xEE9BE5
	JSL(0xC093F9)	//0xEE9BE8
	RTS		//0xEE9BEC
l_0xEE9BED:	//give_sprite_movaddr
	LDA_i(2)	//0xEE9BED
	JSR(l_0xEE9E20)	//0xEE9BF0
	LDA_a(0x97BA)	//0xEE9BF3
	JSL(0xC46028)	//0xEE9BF6
	TAX		//0xEE9BFA
	PHX
	LDA_i(3)	//0xEE9BFB
	JSR(l_0xEE9E20)	//0xEE9BFE
	PLX
	LDA_a(0x97BC)	//0xEE9C01
	AND_i(0x00FF)	//0xEE9C04
	TAY		//0xEE9C07
	LDA_a(0x97BA)	//0xEE9C08
	JSL(0xC093F9)	//0xEE9C0B
	RTS		//0xEE9C0F
l_0xEE9C10:
	LDA_i(6)	//0xEE9C10
	JSR(l_0xEE9E20)	//0xEE9C13
	LDA_a(0x97BC)	//0xEE9C16
	STA_al(0x3170C2)//0xEE9C19
	LDA_a(0x97BE)	//0xEE9C1D
	AND_i(0x00FF)	//0xEE9C20
	STA_al(0x3170C4)//0xEE9C23
	LDX_i(9)	//0xEE9C27
	LDA_a(0x97BA)	//0xEE9C2A
	JSL(0xC46507)	//0xEE9C2D
	PHA		//0xEE9C31
	LDA_a(0x97BF)	//0xEE9C32
	AND_i(0x00FF)	//0xEE9C35
	TAY		//0xEE9C38
	TYX		//0xEE9C39
	PLA		//0xEE9C3A
	JSL(0xC4C91A)	//0xEE9C3B
	RTS		//0xEE9C3F
l_0xEE9C40:
	LDA_i(6)	//0xEE9C40
	JSR(l_0xEE9E20)	//0xEE9C43
	LDA_a(0x97BC)	//0xEE9C46
	STA_al(0x3170C2)//0xEE9C49
	LDA_a(0x97BE)	//0xEE9C4D
	AND_i(0x00FF)	//0xEE9C50
	STA_al(0x3170C4)//0xEE9C53
	LDX_i(9)	//0xEE9C57
	LDA_a(0x97BA)	//0xEE9C5A
	JSL(0xC464B5)	//0xEE9C5D
	PHA		//0xEE9C61
	LDA_a(0x97BF)	//0xEE9C62
	AND_i(0x00FF)	//0xEE9C65
	TAY		//0xEE9C68
	TYX		//0xEE9C69
	PLA		//0xEE9C6A
	JSL(0xC4C91A)	//0xEE9C6B
	RTS		//0xEE9C6F
l_0xEE9C70:
	REP(0x31)	//0xEE9C70
	LDA_al(0x7EB4A1)//0xEE9C72
	AND_i(0x00FF)	//0xEE9C76
	DEC		//0xEE9C79
	TAY		//0xEE9C7A
	LDA_i(0x0500)	//0xEE9C7B
	BRA(0x04)	//0xEE9C7E, branches to 0xEE9C84
	CLC		//0xEE9C80
	ADC_i(0x0A00)	//0xEE9C81
	DEY		//0xEE9C84
	BPL(0xF9)	//0xEE9C85, branches to 0xEE9C80
	RTS		//0xEE9C87
l_0xEE9C88:
	REP(0x31)	//0xEE9C88
	LDA_i(0x6000)	//0xEE9C8A
	STA_d(0x0E)	//0xEE9C8D
	SEP(0x20)	//0xEE9C8F
	LDA_8(0x31)	//0xEE9C91
	STA_d(0x10)	//0xEE9C93
	REP(0x20)	//0xEE9C95
	LDA_i(0x2000)	//0xEE9C97
	TAY		//0xEE9C9A
	SEP(0x20)	//0xEE9C9B
	LDA_8(0x00)	//0xEE9C9D
	BRA(0x02)	//0xEE9C9F, branches to 0xEE9CA3
	STA_dly(0x0E)	//0xEE9CA1
	DEY		//0xEE9CA3
	BPL(0xFB)	//0xEE9CA4, branches to 0xEE9CA1
	REP(0x20)	//0xEE9CA6
	LDA_al(0x306000)//0xEE9CA8
	CMP_i(0x5552)	//0xEE9CAC
	BEQ(0x2D)	//0xEE9CAF, branches to 0xEE9CDE
	LDA_i(0x6000)	//0xEE9CB1
	STA_d(0x0E)	//0xEE9CB4
	SEP(0x20)	//0xEE9CB6
	LDA_8(0x30)	//0xEE9CB8
	STA_d(0x10)	//0xEE9CBA
	REP(0x20)	//0xEE9CBC
	LDA_i(0x2000)	//0xEE9CBE
	TAY		//0xEE9CC1
	SEP(0x20)	//0xEE9CC2
	LDA_8(0x00)	//0xEE9CC4
	BRA(0x02)	//0xEE9CC6, branches to 0xEE9CCA
	STA_dly(0x0E)	//0xEE9CC8
	DEY		//0xEE9CCA
	BPL(0xFB)	//0xEE9CCB, branches to 0xEE9CC8
	REP(0x20)	//0xEE9CCD
	LDA_i(0x5552)	//0xEE9CCF
	STA_al(0x306000)//0xEE9CD2
	STA_al(0x306A00)//0xEE9CD6
	STA_al(0x307400)//0xEE9CDA
	RTL		//0xEE9CDE
l_0xEE9CDF:
	REP(0x31)	//0xEE9CDF
	JSR(l_0xEE9C70)	//0xEE9CE1
	CLC		//0xEE9CE4
	ADC_i(0x6000)	//0xEE9CE5
	STA_d(0x0E)	//0xEE9CE8
	LDA_i(0x6000)	//0xEE9CEA
	STA_d(0x12)	//0xEE9CED
	SEP(0x20)	//0xEE9CEF
	LDA_8(0x30)	//0xEE9CF1
	STA_d(0x10)	//0xEE9CF3
	LDA_8(0x31)	//0xEE9CF5
	STA_d(0x14)	//0xEE9CF7
	REP(0x20)	//0xEE9CF9
	LDA_i(0x0500)	//0xEE9CFB
	JSL(0xC08EED)	//0xEE9CFE
	RTL		//0xEE9D02
l_0xEE9D03:
	STA_d(0xA9)	//0xEE9D03
	PHA		//0xEE9D05
	PHX		//0xEE9D06
	PHY		//0xEE9D07
	JSR(l_0xEE9C70)	//0xEE9D08
	CLC		//0xEE9D0B
	ADC_i(0x6000)	//0xEE9D0C
	STA_d(0x12)	//0xEE9D0F
	LDA_i(0x6000)	//0xEE9D11
	STA_d(0x0E)	//0xEE9D14
	SEP(0x20)	//0xEE9D16
	LDA_8(0x30)	//0xEE9D18
	STA_d(0x14)	//0xEE9D1A
	LDA_8(0x31)	//0xEE9D1C
	STA_d(0x10)	//0xEE9D1E
	REP(0x20)	//0xEE9D20
	LDA_i(0x0500)	//0xEE9D22
	JSL(0xC08EED)	//0xEE9D25
	PLY		//0xEE9D29
	PLX		//0xEE9D2A
	PLA		//0xEE9D2B
	PLD		//0xEE9D2C
	JMP_l(0xEF0B9D)	//0xEE9D2D
l_0xEE9D31:
	REP(0x31)	//0xEE9D31
	PHY		//0xEE9D33
	PHA		//0xEE9D34
	TAY		//0xEE9D35
	LDA_i(0x001C)	//0xEE9D36
	BRA(0x04)	//0xEE9D39, branches to 0xEE9D3F
	CLC		//0xEE9D3B
	ADC_i(0x0A00)	//0xEE9D3C
	DEY		//0xEE9D3F
	BPL(0xF9)	//0xEE9D40, branches to 0xEE9D3B
	CLC		//0xEE9D42
	ADC_i(0x6000)	//0xEE9D43
	STA_d(0x0E)	//0xEE9D46
	LDA_i(0x0030)	//0xEE9D48
	STA_d(0x10)	//0xEE9D4B
	LDA_i(0x09E4)	//0xEE9D4D
	TAY		//0xEE9D50
	SEP(0x20)	//0xEE9D51
	LDA_8(0x00)	//0xEE9D53
	BRA(0x02)	//0xEE9D55, branches to 0xEE9D59
	STA_dly(0x0E)	//0xEE9D57
	DEY		//0xEE9D59
	BPL(0xFB)	//0xEE9D5A, branches to 0xEE9D57
	REP(0x20)	//0xEE9D5C
	PLA		//0xEE9D5E
	ASL		//0xEE9D5F
	TAX		//0xEE9D60
	TXA		//0xEE9D61
	INC		//0xEE9D62
	PLY		//0xEE9D63
	RTL		//0xEE9D64
l_0xEE9D65:
	REP(0x31)	//0xEE9D65
	PHB		//0xEE9D67
	PHD		//0xEE9D68
	PHA		//0xEE9D69
	TDC		//0xEE9D6A
	ADC_i(0xFFEC)	//0xEE9D6B
	TCD		//0xEE9D6E
	PLA		//0xEE9D6F
	TXY		//0xEE9D70
	STY_d(0x12)	//0xEE9D71
	TAX		//0xEE9D73
	DEC		//0xEE9D74
	STA_d(0x10)	//0xEE9D75
	CMP_i(0x0400)	//0xEE9D77
	BCC(0x13)	//0xEE9D7A, branches to 0xEE9D8F
	PHA		//0xEE9D7C
	SEP(0x20)	//0xEE9D7D
	LDA_8(0x31)	//0xEE9D7F
	PHA		//0xEE9D81
	PLB		//0xEE9D82
	REP(0x20)	//0xEE9D83
	PLA		//0xEE9D85
	LSR		//0xEE9D86
	LSR		//0xEE9D87
	LSR		//0xEE9D88
	CLC		//0xEE9D89
	ADC_i(0x5F80)	//0xEE9D8A
	BRA(0x07)	//0xEE9D8D, branches to 0xEE9D96
	LSR		//0xEE9D8F
	LSR		//0xEE9D90
	LSR		//0xEE9D91
	CLC		//0xEE9D92
	ADC_i(0x9C08)	//0xEE9D93
	TAX		//0xEE9D96
	STX_d(0x0E)	//0xEE9D97
	LDY_i(8)	//0xEE9D99
	LDA_d(0x10)	//0xEE9D9C
	JSL(0xC09231)	//0xEE9D9E
	TAX		//0xEE9DA2
	SEP(0x20)	//0xEE9DA3
	LDA_xl(0xC4562F)//0xEE9DA5
	LDY_d(0x12)	//0xEE9DA9
	BEQ(0x0B)	//0xEE9DAB, branches to 0xEE9DB8
	STA_d(0x00)	//0xEE9DAD
	LDX_d(0x0E)	//0xEE9DAF
	LDA_x(0x0000)	//0xEE9DB1
	ORA_d(0x00)	//0xEE9DB4
	BRA(0x0B)	//0xEE9DB6, branches to 0xEE9DC3
	EOR_8(0xFF)	//0xEE9DB8
	STA_d(0x00)	//0xEE9DBA
	LDX_d(0x0E)	//0xEE9DBC
	LDA_x(0x0000)	//0xEE9DBE
	AND_d(0x00)	//0xEE9DC1
	STA_x(0x0000)	//0xEE9DC3
	REP(0x20)	//0xEE9DC6
	AND_i(0x00FF)	//0xEE9DC8
	PLD		//0xEE9DCB
	PLB		//0xEE9DCC
	RTL		//0xEE9DCD
l_0xEE9DCE:
	REP(0x31)	//0xEE9DCE
	PHD		//0xEE9DD0
	PHA		//0xEE9DD1
	TDC		//0xEE9DD2
	ADC_i(0xFFF0)	//0xEE9DD3
	TCD		//0xEE9DD6
	PLA		//0xEE9DD7
	DEC		//0xEE9DD8
	STA_d(0x0E)	//0xEE9DD9
	LSR		//0xEE9DDB
	LSR		//0xEE9DDC
	LSR		//0xEE9DDD
	PHA		//0xEE9DDE
	LDY_i(8)	//0xEE9DDF
	LDA_d(0x0E)	//0xEE9DE2
	JSL(0xC09231)	//0xEE9DE4
	TAX		//0xEE9DE8
	LDA_d(0x0E)	//0xEE9DE9
	CMP_i(0x0400)	//0xEE9DEB
	BCC(0x15)	//0xEE9DEE, branches to 0xEE9E05
	PLA		//0xEE9DF0
	CLC		//0xEE9DF1
	SBC_i(0x007F)	//0xEE9DF2
	PHA		//0xEE9DF5
	SEP(0x20)	//0xEE9DF6
	LDA_xl(0xC4562F)//0xEE9DF8
	PLX		//0xEE9DFC
	AND_xl(0x316000)//0xEE9DFD
	REP(0x20)	//0xEE9E01
	BRA(0x0C)	//0xEE9E03, branches to 0xEE9E11
	SEP(0x20)	//0xEE9E05
	LDA_xl(0xC4562F)//0xEE9E07
	PLX		//0xEE9E0B
	AND_x(0x9C08)	//0xEE9E0C
	REP(0x20)	//0xEE9E0F
	AND_i(0x00FF)	//0xEE9E11
	BEQ(0x05)	//0xEE9E14, branches to 0xEE9E1B
	LDA_i(1)	//0xEE9E16
	BRA(0x03)	//0xEE9E19, branches to 0xEE9E1E
	LDA_i(0)	//0xEE9E1B
	PLD		//0xEE9E1E
	RTL		//0xEE9E1F
l_0xEE9E20:
	REP(0x31)	//0xEE9E20
	TAY		//0xEE9E22
	LDA_i(0x96C5)	//0xEE9E23
	LDX_a(0x97B8)	//0xEE9E26
	CLC		//0xEE9E29
	BRA(0x03)	//0xEE9E2A, branches to 0xEE9E2F
	ADC_i(0x001B)	//0xEE9E2C
	DEX		//0xEE9E2F
	BNE(0xFA)	//0xEE9E30, branches to 0xEE9E2C
	TAX		//0xEE9E32
	LDA_x(0x0000)	//0xEE9E33
	STA_d(0x00)	//0xEE9E36
	LDA_x(0x0002)	//0xEE9E38
	STA_d(0x02)	//0xEE9E3B
	TYA		//0xEE9E3D
	CLC		//0xEE9E3E
	ADC_x(0x0000)	//0xEE9E3F
	STA_x(0x0000)	//0xEE9E42
	SEP(0x20)	//0xEE9E45
	BRA(0x06)	//0xEE9E47, branches to 0xEE9E4F
	LDA_dly(0x00)	//0xEE9E49
	TYX		//0xEE9E4B
	STA_x(0x97BA)	//0xEE9E4C
	DEY		//0xEE9E4F
	BPL(0xF7)	//0xEE9E50, branches to 0xEE9E49
	REP(0x20)	//0xEE9E52
	RTS		//0xEE9E54


/*
 *	EB# :: CCScript library
 *
 *	version 1.000
 */
	
/* EB# CONTROL CODES */

// # GENERIC
command asmcall_long(addr)		{ "[1B 07 {mem24(addr)}]" }
command asmcall_short(addr, rb)	{ "[1B 08 {mem24(addr)} {short rb}]" }
command printb(r, z)			{ "[1B 0A {byte r} {byte z}]" }
command printd(r, z)			{ "[1B 0B {byte r} {byte z}]" }
command printh(r, z)			{ "[1B 0C {byte r} {byte z}]" }
command reg_txtjmp(r)			{ "[1B 0D {byte r}]" }
command reg_txtcall(r)			{ "[1B 0E {byte r}]" }
command reg_asmcall(r)			{ "[1B 0F {byte r}]" }

// # LOADING / STORING
command load8(r, addr)			{ "[1B 10 {byte r} {mem24(addr)}]" }
command load16(r, addr)			{ "[1B 11 {byte r} {mem24(addr)}]" }
command load24(r, addr)			{ "[1B 12 {byte r} {mem24(addr)}]" }
command load32(r, addr)			{ "[1B 13 {byte r} {mem24(addr)}]" }
command store8(r, addr)			{ "[1B 14 {byte r} {mem24(addr)}]" }
command store16(r, addr)		{ "[1B 15 {byte r} {mem24(addr)}]" }
command store24(r, addr)		{ "[1B 16 {byte r} {mem24(addr)}]" }
command store32(r, addr)		{ "[1B 17 {byte r} {mem24(addr)}]" }
command load16c(r, constant)	{ "[1B 18 {byte r} {short constant}]" }
command load32c(r, constant)	{ "[1B 19 {byte r} {long constant}]" }
command mov_reg_result(r)		{ "[1B 1A {byte r}]" }
command mov_reg_argument(r)		{ "[1B 1B {byte r}]" }
command mov_reg_counter(r)		{ "[1B 1C {byte r}]" }
command mov_result_reg(r)		{ "[1B 1D {byte r}]" }
command mov_argument_reg(r)		{ "[1B 1E {byte r}]" }
command mov_counter_reg(r)		{ "[1B 1F {byte r}]" }

// # MANIPULATION
command add(x, l, r)			{ "[1B 20 {byte x} {byte l} {byte r}]" }
command sub(x, l, r)			{ "[1B 21 {byte x} {byte l} {byte r}]" }
command mul(x, l, r)			{ "[1B 22 {byte x} {byte l} {byte r}]" }
command div(x, m, l, r)			{ "[1B 23 {byte x} {byte m} {byte l} {byte r}]" }
command bwand(x, l, r)			{ "[1B 24 {byte x} {byte l} {byte r}]" }
command bwor(x, l, r)			{ "[1B 25 {byte x} {byte l} {byte r}]" }
command bwxor(x, l, r)			{ "[1B 26 {byte x} {byte l} {byte r}]" }
command push(r)					{ "[1B 27 {byte r}]" }
command pull(r)					{ "[1B 28 {byte r}]" }
command copy(d, s)				{ "[1B 29 {byte d} {byte s}]" }

// # MANIPULATION (CONSTANT)
command addc(x, l, r)			{ "[1B 30 {byte x} {byte l} {long r}]" }
command subc(x, l, r)			{ "[1B 31 {byte x} {byte l} {long r}]" }
command mulc(x, l, r)			{ "[1B 32 {byte x} {byte l} {long r}]" }
command divc(x, m, l, r)		{ "[1B 33 {byte x} {byte m} {byte l} {long r}]" }
command bwandc(x, l, r)			{ "[1B 34 {byte x} {byte l} {long r}]" }
command bworc(x, l, r)			{ "[1B 35 {byte x} {byte l} {long r}]" }
command bwxorc(x, l, r)			{ "[1B 36 {byte x} {byte l} {long r}]" }
command pushc(r)				{ "[1B 37 {long r}]" }
command pop						{ "[1B 38]" }
command alloc(c)				{ "[1B 39 {short c}]" }
command ina(d, s)				{ "[1B 3A {byte d} {byte s}]" }
command dec(d, s)				{ "[1B 3B {byte d} {byte s}]" }
command shl(d, s)				{ "[1B 3C {byte d} {byte s}]" }
command shr(d, s)				{ "[1B 3D {byte d} {byte s}]" }
command sload(d, sp)			{ "[1B 3E {byte d} {short sp}]" }
command sstore(d, sp)			{ "[1B 3F {byte d} {short sp}]" }

// # COMPARISON
command eq(x, l, r)				{ "[1B 40 {byte x} {byte l} {byte r}]" }
command neq(x, l, r)			{ "[1B 41 {byte x} {byte l} {byte r}]" }
command gte(x, l, r)			{ "[1B 42 {byte x} {byte l} {byte r}]" }
command lte(x, l, r)			{ "[1B 43 {byte x} {byte l} {byte r}]" }
command gt(x, l, r)				{ "[1B 44 {byte x} {byte l} {byte r}]" }
command lt(x, l, r)				{ "[1B 45 {byte x} {byte l} {byte r}]" }

// # COMPARISON (CONSTANT)
command eqc(x, l, r)			{ "[1B 50 {byte x} {byte l} {long r}]" }
command neqc(x, l, r)			{ "[1B 51 {byte x} {byte l} {long r}]" }
command gtec(x, l, r)			{ "[1B 52 {byte x} {byte l} {long r}]" }
command ltec(x, l, r)			{ "[1B 53 {byte x} {byte l} {long r}]" }
command gtc(x, l, r)			{ "[1B 54 {byte x} {byte l} {long r}]" }
command ltc(x, l, r)			{ "[1B 55 {byte x} {byte l} {long r}]" }

// # MISCELLANEOUS
// author's note: [1B 60-63] is listed below, under movement-related stuff.
command window_title(w, p)		{ "[1B 64 {byte p} {byte w}]" }
command memset(p, v, r)			{ "[1B 65 {byte p} {byte v} {byte r}]" }
command memcpy(f, t, r)			{ "[1B 66 {byte f} {byte t} {byte r}]" }

// # LOADING / STORING (INDIRECTION/POINTERS)
command pload8(d, s)			{ "[1B 70 {byte d} {byte s}]" }
command pload16(d, s)			{ "[1B 71 {byte d} {byte s}]" }
command pload24(d, s)			{ "[1B 72 {byte d} {byte s}]" }
command pload32(d, s)			{ "[1B 73 {byte d} {byte s}]" }
command pstore8(s, d)			{ "[1B 74 {byte s} {byte d}]" }
command pstore16(s, d)			{ "[1B 75 {byte s} {byte d}]" }
command pstore24(s, d)			{ "[1B 76 {byte s} {byte d}]" }
command pstore32(s, d)			{ "[1B 77 {byte s} {byte d}]" }

// A shortcut for peeking at the top of the stack.
command peek(r) {
	pull(r)
	push(r)
}

/* GENERIC DEFINES */

/*
 * Item definitions
 */
 
define ITEM_NULL = 0x00
define ITEM_BADGE_FRANKLIN = 0x01
define ITEM_BEAR_TEDDY = 0x02
define ITEM_BEAR_SUPER_PLUSH = 0x03
define ITEM_BROKEN_MACHINE = 0x04
define ITEM_BROKEN_GADGET = 0x05
define ITEM_BROKEN_AIR_GUN = 0x06
define ITEM_BROKEN_SPRAY_CAN = 0x07
define ITEM_BROKEN_LASER = 0x08
define ITEM_BROKEN_IRON = 0x09
define ITEM_BROKEN_PIPE = 0x0A
define ITEM_BROKEN_CANNON = 0x0B
define ITEM_BROKEN_TUBE = 0x0C
define ITEM_BROKEN_BAZOOKA = 0x0D
define ITEM_BROKEN_TRUMPET = 0x0E
define ITEM_BROKEN_HARMONICA = 0x0F
define ITEM_BROKEN_ANTENNA = 0x10
define ITEM_BAT_CRACKED = 0x11
define ITEM_BAT_TEE_BALL = 0x12
define ITEM_BAT_SAND_LOT = 0x13
define ITEM_BAT_MINOR_LEAGUE = 0x14
define ITEM_BAT_MR_BASEBALL = 0x15
define ITEM_BAT_BIG_LEAGUE_A= 0x16
define ITEM_BAT_FAME = 0x17
define ITEM_BAT_MAGICANT = 0x18
define ITEM_BAT_LEGENDARY = 0x19
define ITEM_BAT_GUTSY = 0x1A
define ITEM_BAT_CASEY = 0x1B
define ITEM_PAN_FRY = 0x1C
define ITEM_PAN_THICK_FRY = 0x1D
define ITEM_PAN_DELUXE_FRY = 0x1E
define ITEM_PAN_CHEF_FRY = 0x1F
define ITEM_PAN_FRENCH_FRY = 0x20
define ITEM_PAN_MAGIC_FRY = 0x21
define ITEM_PAN_HOLY_FRY = 0x22
define ITEM_SWORD_OF_KINGS = 0x23
define ITEM_GUN_POP = 0x24
define ITEM_GUN_STUN = 0x25
define ITEM_GUN_TOY_AIR = 0x26
define ITEM_GUN_MAGNUM_AIR = 0x27
define ITEM_GUN_ZIP = 0x28
define ITEM_GUN_LASER = 0x29
define ITEM_BEAM_HYPER = 0x2A
define ITEM_BEAM_CRUSHER = 0x2B
define ITEM_BEAM_SPECTRUM = 0x2C
define ITEM_RAY_DEATH = 0x2D
define ITEM_BEAM_BADDEST = 0x2E
define ITEM_GUN_MOON_BEAM = 0x2F
define ITEM_BEAM_GAIA = 0x30
define ITEM_YOYO = 0x31
define ITEM_SLINGSHOT = 0x32
define ITEM_SLINGSHOT_BIONIC = 0x33
define ITEM_YOYO_TRICK = 0x34
define ITEM_YOYO_COMBAT = 0x35
define ITEM_CHARM_TRAVEL = 0x36
define ITEM_CHARM_GREAT = 0x37 
define ITEM_CHARM_CRYSTAL = 0x38
define ITEM_RABBITS_FOOT = 0x39
define ITEM_PENDANT_FLAME = 0x3A
define ITEM_PENDANT_RAIN = 0x3B
define ITEM_PENDANT_NIGHT = 0x3C
define ITEM_PENDANT_SEA = 0x3D
define ITEM_PENDANT_STAR = 0x3E
define ITEM_CLOAK_OF_KINGS = 0x3F
define ITEM_BRACELET_CHEAP = 0x40
define ITEM_BRACELET_COPPER = 0x41
define ITEM_BRACELET_SILVER = 0x42
define ITEM_BRACELET_GOLD = 0x43
define ITEM_BAND_PLATINUM_A = 0x44
define ITEM_BAND_DIAMOND_A = 0x45
define ITEM_BRACELET_PIXIE = 0x46
define ITEM_BAND_CHERUB = 0x47
define ITEM_BAND_GODDESS = 0x48
define ITEM_BRACER_OF_KINGS = 0x49
define ITEM_CAP_BASEBALL = 0x4A
define ITEM_HAT_HOLMES = 0x4B
define ITEM_CAP_MR_BASEBALL = 0x4C
define ITEM_HAT_HARD = 0x4D
define ITEM_RIBBON = 0x4E
define ITEM_RIBBON_RED = 0x4F
define ITEM_RIBBON_GODDESS = 0x50
define ITEM_COIN_SLUMBER = 0x51
define ITEM_COIN_DEFENSE = 0x52
define ITEM_COIN_LUCKY = 0x53
define ITEM_COIN_TALISMAN = 0x54
define ITEM_COIN_SHINY = 0x55
define ITEM_COIN_SOUVENIR = 0x56
define ITEM_DIADEM_OF_KINGS = 0x57
define ITEM_COOKIE = 0x58
define ITEM_BAG_OF_FRIES = 0x59
define ITEM_HAMBURGER = 0x5A
define ITEM_EGG_BOILED = 0x5B
define ITEM_EGG_FRESH = 0x5C
define ITEM_LUNCH_PICNIC = 0x5D
define ITEM_SUMMERS_PASTA = 0x5E
define ITEM_PIZZA = 0x5F
define ITEM_CHEF_SPECIAL = 0x60
define ITEM_PIZZA_LARGE = 0x61
define ITEM_PSI_CARAMEL = 0x62
define ITEM_MAGIC_TRUFFLE = 0x63
define ITEM_LUNCH_BRAIN_FOOD = 0x64
define ITEM_ROCK_CANDY = 0x65
define ITEM_CROISSANT = 0x66
define ITEM_BREAD_ROLL = 0x67
define ITEM_BUBBLE_GUM = 0x68
define ITEM_JAR_FLY_HONEY = 0x69
define ITEM_CAN_FRUIT_JUICE = 0x6A
define ITEM_TEA_ROYAL_ICED = 0x6B
define ITEM_PROTEIN_DRINK = 0x6C
define ITEM_KRAKEN_SOUP = 0x6D
define ITEM_WATER_BOTTLE = 0x6E
define ITEM_COLD_REMEDY = 0x6F
define ITEM_SERUM_VIAL = 0x70
define ITEM_CAPSULE_IQ = 0x71
define ITEM_CAPSULE_GUTS = 0x72
define ITEM_CAPSULE_SPEED = 0x73
define ITEM_CAPSULE_VITAL = 0x74
define ITEM_CAPSULE_LUCK = 0x75
define ITEM_PACKET_KETCHUP = 0x76
define ITEM_PACKET_SUGAR = 0x77
define ITEM_COCOA_TIN = 0x78
define ITEM_CREAM_CARTON = 0x79
define ITEM_SPRIG_PARSLEY = 0x7A
define ITEM_JAR_HOT_SAUCE = 0x7B
define ITEM_PACKET_SALT = 0x7C
define ITEM_PASS_BACKSTAGE = 0x7D
define ITEM_JAR_DELISAUCE = 0x7E
define ITEM_TOWEL_WET = 0x7F
define ITEM_HERB_REFRESHING = 0x80
define ITEM_HERB_SECRET = 0x81
define ITEM_HORN_LIFE = 0x82
define ITEM_UNIT_COUNTER_PSI = 0x83
define ITEM_SHIELD_KILLER = 0x84
define ITEM_BAZOOKA = 0x85
define ITEM_BAZOOKA_HEAVY = 0x86
define ITEM_HP_SUCKER = 0x87
define ITEM_HP_SUCKER_HUNGRY = 0x88
define ITEM_SPRAY_XTERMINATOR = 0x89
define ITEM_SLIME_GENERATOR = 0x8A
define ITEM_YOGURT_DISPENSER = 0x8B
define ITEM_RULER = 0x8C
define ITEM_SNAKE_BAG = 0x8D
define ITEM_MUMMY_WRAP = 0x8E
define ITEM_PROTRACTOR = 0x8F
define ITEM_BOTTLE_ROCKET = 0x90
define ITEM_BOTTLE_ROCKET_BIG = 0x91
define ITEM_BOTTLE_ROCKET_MULTI = 0x92
define ITEM_BOMB = 0x93
define ITEM_BOMB_SUPER = 0x94
define ITEM_SPRAY_INSECTICIDE = 0x95
define ITEM_RUST_PROMOTER = 0x96
define ITEM_RUST_PROMOTER_DX = 0x97
define ITEM_SOCKS_DIRTY_PAIR = 0x98
define ITEM_BEETLE_STAG = 0x99
define ITEM_TOOTHBRUSH = 0x9A
define ITEM_HANDBAG_STRAP = 0x9B
define ITEM_PHAROAH_CURSE = 0x9C
define ITEM_SHOWER_DEFENSE = 0x9D
define ITEM_LETTER_MOM = 0x9E
define ITEM_PILL_SUDDEN_GUTS = 0x9F
define ITEM_DRAGONITE_BAG = 0xA0
define ITEM_SPRAY_DEFENSE = 0xA1
define ITEM_PIGGY_NOSE = 0xA2
define ITEM_FOR_SALE_SIGN = 0xA3
define ITEM_SHYNESS_BOOK = 0xA4
define ITEM_PICTURE_POSTCARD = 0xA5
define ITEM_KING_BANANA = 0xA6
define ITEM_LETTER_TONY = 0xA7
define ITEM_CHICK = 0xA8
define ITEM_CHICKEN = 0xA9
define ITEM_KEY_SHACK = 0xAA
define ITEM_KEY_CABIN = 0xAB
define ITEM_BAD_KEY_MACHINE = 0xAC
define ITEM_TEMP_GOODS = 0xAD
define ITEM_ZOMBIE_PAPER = 0xAE
define ITEM_HAWK_EYE = 0xAF
define ITEM_BICYCLE = 0xB0
define ITEM_ATM_CARD = 0xB1
define ITEM_SHOW_TICKET = 0xB2
define ITEM_LETTER_KIDS = 0xB3
define ITEM_WAD_BILLS = 0xB4
define ITEM_RECEIVER_PHONE = 0xB5
define ITEM_DIAMOND = 0xB6
define ITEM_SIGNED_BANANA = 0xB7
define ITEM_ERASER_PENCIL = 0xB8
define ITEM_HIEROGLYPH_COPY = 0xB9
define ITEM_METEOTITE = 0xBA
define ITEM_CONTACT_LENS = 0xBB
define ITEM_HAND_AID = 0xBC
define ITEM_TROUT_YOGURT = 0xBD
define ITEM_BANANA = 0xBE
define ITEM_CALORIE_STICK = 0xBF
define ITEM_KEY_TOWER = 0xC0
define ITEM_METEORITE_PIECE = 0xC1
define ITEM_PENDANT_EARTH = 0xC2
define ITEM_NEUTRALIZER = 0xC3
define ITEM_SOUND_STONE = 0xC4
define ITEM_EXIT_MOUSE = 0xC5
define ITEM_RESORT_GELATO = 0xC6
define ITEM_SNAKE = 0xC7
define ITEM_VIPER = 0xC8
define ITEM_BRAIN_STONE = 0xC9
define ITEM_TOWN_MAP = 0xCA
define ITEM_VIDEO_RELAXANT = 0xCB
define ITEM_SUPORMA = 0xCC
define ITEM_KEY_LOCKER = 0xCD
define ITEM_INSIGNIFICANT_ITEM = 0xCE
define ITEM_MAGIC_TART = 0xCF
define ITEM_TINY_RUBY = 0xD0
define ITEM_MONKEY_LOVE = 0xD1
define ITEM_ERASER_ERASER = 0xD2
define ITEM_TENDAKRAUT = 0xD3
define ITEM_BAT_TREX = 0xD4
define ITEM_BAT_BIG_LEAGUE_B = 0xD5
define ITEM_BAT_ULTIMATE = 0xD6
define ITEM_BEAM_DOUBLE = 0xD7
define ITEM_BAND_PLATINUM_B = 0xD8
define ITEM_BAND_DIAMOND_B = 0xD9
define ITEM_RIBBON_DEFENSE = 0xDA
define ITEM_RIBBON_TALISMAN = 0xDB
define ITEM_RIBBON_SATURN = 0xDC
define ITEM_COIN_SILENCE = 0xDD
define ITEM_COIN_CHARM = 0xDE
define ITEM_CUP_NOODLES = 0xDF
define ITEM_SKIP_SANDWICH = 0xE0
define ITEM_SKIP_SANDWICH_DX = 0xE1
define ITEM_LUCKY_SANDWICH_A = 0xE2
define ITEM_LUCKY_SANDWICH_B = 0xE3
define ITEM_LUCKY_SANDWICH_C = 0xE4
define ITEM_LUCKY_SANDWICH_D = 0xE5
define ITEM_LUCKY_SANDWICH_E = 0xE6
define ITEM_LUCKY_SANDWICH_F = 0xE7
define ITEM_CUP_COFFEE = 0xE8
define ITEM_BURGER_DOUBLE = 0xE9
define ITEM_PCB = 0xEA  // Peanut Cheese Bar
define ITEM_PIGGY_JELLY = 0xEB
define ITEM_BOWL_RICE_GRUEL = 0xEC
define ITEM_BEAN_CROQUETTE = 0xED
define ITEM_MOLOKHEIYA_SOUP = 0xEE
define ITEM_PLAIN_ROLL = 0xEF
define ITEM_KABOB = 0xF0
define ITEM_PLAIN_YOGURT = 0xF1
define ITEM_JERKY_BEEF = 0xF2
define ITEM_BURGER_MAMMOTH = 0xF3
define ITEM_JERKY_SPICY = 0xF4
define ITEM_JERKY_LUXURY = 0xF5
define ITEM_WATER_BOTTLE_DX = 0xF6
define ITEM_MAGIC_PUDDING = 0xF7
define ITEM_PAN_NONSTICK = 0xF8
define ITEM_COIN_MR_SATURN = 0xF9
define ITEM_METEORINUM = 0xFA
define ITEM_POPSICLE = 0xFB
define ITEM_CUP_LIFENOODLES = 0xFC
define ITEM_KEY_CARROT = 0xFD


/* MOVEMENT / DEMO STUFF */

// Demo numbers for the demo sequence pointer-table.
define DEMO_SUMMERS		= 0 	// 1st demo sequence
define DEMO_THREED		= 1 	// unused/hidden demo sequence -- Ness & Paula walk around zombie Threed cemetary.
define DEMO_DEEPDARK	= 2 	// 2nd
define DEMO_BUS			= 3 	// 3rd
define DEMO_PYRAMID		= 4 	// 4th
define DEMO_TWOSON		= 5 	// 5th
define DEMO_SCARABA		= 6 	// 6th
define DEMO_FOURSIDE	= 7 	// 7th
define DEMO_SUMMERS_X	= 8 	// unused/hidden demo sequence -- Ness & co. walk around upper summers.
define DEMO_GIANT		= 9 	// 8th

// Movement pattern numbers for each demo sequence.
define MOVE_SUMMERS				= 0x0217
define MOVE_THREED				= 0x0218
define MOVE_DEEPDARK			= 0x0219
define MOVE_DEEPDARK_PETUNIA1	= 0x002C	// I'm assuming this is a "stay still" movement code.
define MOVE_DEEPDARK_PETUNIA2	= 0x021A	// Demonic Petunia has its own movement code for this particular demo sequence, when it moves east a little towards the party.
define MOVE_BUS					= 0x021B
define MOVE_BUS_SCOOP			= 0x021C	// The dirt scooper in this demo sequence has its own movement code, heading east.
define MOVE_PYRAMID				= 0x021D
define MOVE_TWOSON				= 0x021E
define MOVE_SCARABA				= 0x021F
define MOVE_FOURSIDE			= 0x0220
define MOVE_SUMMERS_X			= 0x0221
define MOVE_GIANT				= 0x0222


/*
 * ROM manipulation helpers 
 */

// Converts a number to a little-endian formatted 24-bit value.
command mem24(n) { 
	"[{short n}{byte [2] n}]"
}

// Links an item's help text pointer to a label.
command item_link(itemnum, target) {
	ROMTBL[0xD55023, 0x27, itemnum] = target
}

// Links a movement sequence to a label.  (Obsoleted by new arbitrary movement-pattern calling control codes.)
command mov_link(seqnum, target) {
	ROMTBL[0xC400D4, 0x03, seqnum] = mem24(target)
}

// Links a demo sequence to a label.
command demo_link(seqnum, target) {
	ROMTBL[0xC3FD8D, 0x04, seqnum] = target
}

// Sets which demo is played in which slot.
// There are a maximum of 10 demoes: 0-9, and there are a maximum of 8 slots: 0-7.
command demo_slot(seqnum, slot) {
	ROMTBL[0xC4DC48, 0x0C, slot] = byte seqnum
}

// Changes the demo's music track.
command demo_music(tracknum) {
	ROM[0xC4DC41] = byte tracknum
}
	
// Change the style of the spotlight:
// 0 - normal
// 1 - wide
// 2 - closes (difficult to explain without seeing it)
command spotlight_style(style) {
	ROM[0xC4DA12] = byte style
}


/*
 * New movement-related control codes
 */

// Creates a TPT entry with an arbitrary movement pattern, pointed to by ptr.
command create_tpt_movaddr(entry, ptr, effect) {
	"[1B 60 {short entry} {mem24(ptr)} {byte effect}]"
}

// Creates a sprite with an arbitrary movement pattern, pointed to by ptr.
command create_sprite_movaddr(entry, ptr, effect) {
	"[1B 61 {short entry} {mem24(ptr)} {byte effect}]"
}

// Gives an on-screen TPT entry an arbitrary movement pattern, pointed to by ptr.
command give_tpt_movaddr(entry, ptr) {
	"[1B 62 {short entry} {mem24(ptr)}]"
}

// Gives an on-screen sprite entry an arbitrary movement pattern, pointed to by ptr.
command give_sprite_movaddr(entry, ptr) {
	"[1B 63 {short entry} {mem24(ptr)}]"
}


/*
 * Movement codes -- these are entirely different from control codes.
 */

command mov_end "[00]"
command mov_loop_start(i) "[01 {byte i}]"
command mov_loop_end "[02]"
command mov_jmlmov(target) "[03 {mem24(ptr)}]"
command mov_jslmov(target) "[04 {mem24(ptr)}]"
command mov_rtl "[05]"
command mov_pause(n) "[06 {byte n}]"

// The difference between mov_halt and mov_end seems to be that mov_end either erases
// or makes invisible the active entry.  mov_halt just finishes the movement pattern in question
// and leaves the entry alone after that.
command mov_halt "[09]"

command mov_tablewrite(i, w) "[0E {byte i} {short w}]"

command mov_ramwrite(w, b) "[12 {short w} {byte b}]"

command mov_jmpmov(target) "[19 {short target}]"
command mov_jsrmov(target) "[1A {short target}]"
command mov_rts "[1B]"

command mov_loadtmp(c) "[1D {short c}]"

// Sets active entry's X and Y co-ordinates, in pixels.  Multiply map tile sector by 32 to get co-ordinates.
command mov_setx(n) "[28 {short n}]"
command mov_sety(n) "[29 {short n}]"
command mov_setxy(x,y) "[28 {short x} 29 {short y}]"

// Moves active entry by N.  This number is signed, so FFFF is negative 1, FFFE is negative 2, etc.
command mov_movx(n) "[2B {short n}]"
command mov_movy(n) "[2B {short n}]"

// Long calls assembly.
command mov_jslasm(target) "[42 {mem24(target)}]"

// Long-calls a short-returning movement pattern subroutine.  Fill fivebyte in with a location of a 0x05 byte in the bank you're calling to.
// This is a non-standard movement control code only found in EB++.
// (Make sure your fivebyte address is a non-header address.  Subtract 0x200 if you have a header.)
command mov_jslmov_short(target, fivebyte) "[4D {short target}{byte [2] target} {short fivebyte}]"


/*
 * Movement subroutines
 */

// Calls an arbitrary block of text from within a movement pattern.
command movs_calltext(target) {
	mov_jslasm(0xC0A88D)
	"[{byte [2] target} 00 {short target}]"
}

// Cease walking animation.
command movs_stop {
	mov_tablewrite(4,1)	//"[0E 04 01 00]"
}

// Start walking animation.
command movs_go {
	mov_tablewrite(4,0)	//"[0E 04 00 00]"
}

// Gradually moves the active entry to the destination (X,Y), in pixel co-ordinates.
command movs_walker(x, y) {
	mov_tablewrite(0x06, x)
	mov_tablewrite(0x07, y)
	mov_jslmov_short(0xC3AB59, 0x01F6)
}

// Like movs_walker, but the direction the sprite faces seems to be... backwards.  Think moon-walking.  Or driving in reverse.
command movs_slider(x, y) {
	mov_tablewrite(0x06, x)
	mov_tablewrite(0x07, y)
	mov_jslmov_short(0xC3AB67, 0x01F6)
}

// Changes the active sprite using the current movement code's direction.
// At the moment, it only seems to work for the party or if the sprite is animated.
command movs_dir(dir) {
	mov_jslasm(0xC0A651) "[{byte dir}]"
}

// Another direction-setting subroutine.  Only works for currently animating sprites.
command movs_dirB(dir) {
	mov_loadtmp(dir)
	mov_jslasm(0xC0A65F)
}

// Continually walk the active sprite in the specified direction until interrupted.
command movs_dirwalker(dir) {
	mov_loadtmp(dir)
	mov_jslmov_short(0xC3AA1E, 0x01F6)	// "[1A 1E AA]" directional walker subroutine, same one used in the flyovers.
}

// This seems to make the sprite warp to the party, or perhaps the camera.
command movs_partyjump {
	mov_jslmov_short(0xC34E73, 0x01F6)
}

// Initialization routines.
command movs_init(speed, style) {
	mov_jslmov_short(0xC3AA38, 0x01F6)			// Sets the sprite up to be animated. (walking in place)
	mov_jslasm(0xC0A685) "[{short speed}]"
	mov_tablewrite(5, byte style)
}

command movs_init_noanim(speed, style) {
	mov_jslmov_short(0xC3DBE0, 0x01F6)			// Sets the sprite up to not be animated.
	mov_jslasm(0xC0A685) "[{short speed}]"
	mov_tablewrite(5, byte style)
}


/*
 * Demo-specific movements
 */

// Shows "produced by Shigesato Itoi."
command demo_itoi {
	mov_jslasm(0xC4DD28)			// Shows "produced by Shigesato Itoi."
	mov_ramwrite(0x001A, 0x17)		// Keeps the background from disappearing after loading "Shigesato Itoi."
}

// Shows "presented by Nintendo."
command demo_nintendo {
	mov_jslasm(0xC4DDD0)
	mov_ramwrite(0x001A, 0x17)		// Keeps the background from disappearing.
}

// Marks the end of a movement pattern.  Not necessarily the end of the entire demo sequence.
command demo_stop {
	mov_jslasm(0xC0A8A0)			// "[42 A0 A8 C0]"
	"[C5 00 DF E5]"					// arguments
}

// End movement codes for a demo sequence movement.
command demo_end {
	demo_stop
	mov_jslasm(0xC46E46)			// "[42 46 6E C4]"
	mov_halt						// "[09]"
}

